import { GoogleGenAI, Type } from "@google/genai";
import type { AnalysisResult } from '../types';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

// Helper to detect Chinese characters
const isChinese = (text: string): boolean => /[\u4e00-\u9fa5]/.test(text);

const analysisSchema = {
  type: Type.OBJECT,
  properties: {
    isAI: {
      type: Type.BOOLEAN,
      description: "True if the text is likely AI-generated, false otherwise.",
    },
    confidence: {
      type: Type.NUMBER,
      description: "A value between 0.0 and 1.0 representing the confidence of the assessment.",
    },
    reasoning: {
      type: Type.STRING,
      description: "A brief, one-sentence explanation for the assessment."
    },
  },
  required: ["isAI", "confidence", "reasoning"],
};

export const analyzeText = async (text: string): Promise<AnalysisResult> => {
  try {
    const languageContext = isChinese(text)
      ? "The user input is in Chinese. Please conduct your analysis based on the patterns and nuances of AI-generated Chinese text."
      : "The user input is in English. Please conduct your analysis based on the patterns and nuances of AI-generated English text.";

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: `Analyze the following text to determine if it was generated by an AI. ${languageContext} Provide your analysis in the specified JSON format.

      Text to analyze:
      ---
      ${text}
      ---`,
      config: {
        responseMimeType: "application/json",
        responseSchema: analysisSchema,
      },
    });

    const jsonResponse = JSON.parse(response.text) as AnalysisResult;

    // Truncate reasoning to the first sentence. This is a safeguard.
    const reasoning = jsonResponse.reasoning;
    // Use Chinese punctuation for Chinese text, otherwise use English punctuation.
    const sentenceEndRegex = isChinese(text) ? /[。？！]/ : /[.?!]/;
    const firstSentenceMatch = reasoning.match(sentenceEndRegex);

    if (firstSentenceMatch && firstSentenceMatch.index !== undefined) {
      jsonResponse.reasoning = reasoning.substring(0, firstSentenceMatch.index + 1);
    }

    return jsonResponse;

  } catch (error) {
    console.error("Error during text analysis:", error);
    if (error instanceof Error && error.message.includes('JSON')) {
       throw new Error("AI returned an invalid analysis format. Please try again.");
    }
    throw new Error("Failed to analyze text. The AI model may be temporarily unavailable.");
  }
};


export const rewriteText = async (text: string): Promise<string> => {
  const isInputChinese = isChinese(text);

  const chinesePrompt = `
    请将以下文本进行深度重写和润色。核心目标是使其在保持书面语风格和专业性的同时，展现出顶尖人类作者的写作技巧，从而规避AI检测。请严格遵循以下高级写作准则：

    1.  **句式精妙多变**:
        *   构建复杂且有层次感的句式结构，多使用从句、并列句和插入语来丰富表达。
        *   同时，巧妙地穿插一些简洁有力的短句，以增强文章的节奏感和重点。
        *   避免单调重复的句子开头，尝试用不同的方式引导句子。

    2.  **词汇精准典雅**:
        *   选用精准、生动的词汇，体现专业性和文采，但要避免堆砌华丽辞藻和AI常用的陈词滥调（例如：“值得一提的是”、“总而言之”）。
        *   用词需符合书面语规范，自然流畅，避免口语化和网络用语。

    3.  **结构逻辑流畅**:
        *   确保文章逻辑清晰，段落之间衔接自然。
        *   使用高级的、多样化的过渡方式（例如通过语义、关键词承接），而不是依赖“首先”、“其次”、“此外”这类僵硬的模板化连接词。
        *   文章结构应有自然的起承转合，但不要陷入“总-分-总”的刻板模式。

    4.  **注入思想深度**:
        *   在改写中可以适度引入更深层次的分析、观点或独特的视角，让文章不止于信息陈述。
        *   通过精妙的类比或比喻来阐释复杂的概念，提升文章的可读性和说服力。
        
    5.  **建立作者声调 (Authorial Voice)**:
        *   注入一种自信、坚定或深思熟虑的语气，让文章听起来像一个有主见的专家，而不是一个中立的信息复述机器。
        *   可以策略性地使用反问句来引导读者思考，或使用带有个人情感色彩的词语来增强感染力。

    **绝对禁止**:
    *   任何听起来像机器翻译的生硬语法。
    *   任何模板化的、缺乏个性的表达方式。
    *   过于中立、客观、没有任何感情色彩的“机器人”语调。

    请直接输出重写后的文本，不要添加任何额外的说明。

    待改写文本:
    ---
    ${text}
    ---
  `;

  const englishPrompt = `
    Please perform a deep rewrite and polish of the following text. The core objective is to make it indistinguishable from content written by an expert human author, exhibiting a sophisticated, formal writing style that will bypass AI detection. Strictly adhere to the following advanced writing principles:

    1.  **Sophisticated & Varied Sentence Structure**:
        *   Construct complex sentences with varied clauses (subordinate, relative, etc.) to convey nuanced ideas.
        *   Strategically intersperse these with clear, concise sentences to create emphasis and improve readability ("burstiness").
        *   Vary sentence openings to avoid monotony.

    2.  **Precise & Elegant Diction**:
        *   Use precise, evocative, and professional vocabulary that demonstrates command of the language.
        *   Avoid jargon and clichés commonly produced by AI (e.g., "In the digital age," "It is worth noting," "In conclusion").
        *   The tone must be consistently formal, avoiding colloquialisms.

    3.  **Logical & Seamless Flow**:
        *   Ensure the text has a clear logical progression, with paragraphs transitioning smoothly.
        *   Employ sophisticated transitional techniques (e.g., semantic links, echoing key words) rather than robotic signposts ("Firstly," "Secondly," "Moreover").
        *   The structure should feel natural and well-argued, not forced into a rigid, formulaic template.

    4.  **Inject Intellectual Depth**:
        *   Where appropriate, introduce deeper analysis, unique perspectives, or insightful connections to elevate the content.
        *   Use well-crafted analogies or metaphors to clarify complex points and enhance persuasive power.

    5.  **Establish an Authorial Voice**:
        *   Infuse the text with a confident, assertive, or contemplative tone. It should sound like an expert with a point of view, not a neutral information-retrieval system.
        *   Strategically use rhetorical questions to engage the reader or stylistic fragments for emphasis, mimicking human thought processes.

    **Strictly Prohibited**:
    *   Any syntax that sounds robotic or syntactically awkward.
    *   Any templated, impersonal, or formulaic phrasing.
    *   A detached, overly-objective, "robotic" tone.

    Output only the rewritten text, with no extra explanations.

    Text to rewrite:
    ---
    ${text}
    ---
  `;

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: isInputChinese ? chinesePrompt : englishPrompt,
      config: {
        temperature: 0.75,
      }
    });
    return response.text.trim();
  } catch (error) {
    console.error("Error during text rewriting:", error);
    throw new Error("Failed to rewrite text. Please try again.");
  }
};